.. _l10n:

===================
Localization (L10n)
===================

Playdoh comes with all the libraries and tools you will need in production
or development for localization.

Localization works by searching for localizable text in your source code and
extracting (or merging them) into `.po` files in `locale/`.

`locale/` by Mozilla convention is an :ref:`SVN repository <l10n-svn>` that localizers can commit
to.


Requirements
------------

The one set of low level tools not provided is ``gettext``.

::

    # for ubuntu/debian
    aptitude install gettext

    # for mac
    brew install gettext


Testing It Out, Right Now
-------------------------

Playdoh comes with
a sample app called ``examples``
which is also localized
into French.
This is so that
you can get
the hang of how things work out of
the box.
To get started, simply follow these quick steps:

#. ``./bin/compile-mo.sh locale/``
#. Set ``DEV=True`` in ``settings_local.py``
#. ``./manage.py runserver``
#. Point your browser to ``http://127.0.0.1:8000/fr``



Installation
------------

.. _l10n-svn:

SVN
~~~

You'll want the ``locale/`` to be checked into SVN so localizers can use tools
like Verbatim_ to localize your app.

You can create an empty subdirectory off of
https://svn.mozilla.org/projects/l10n-misc/trunk/ to store your `.po` files::

    cd /tmp
    svn co https://svn.mozilla.org/projects/l10n-misc/trunk/
    cd trunk
    mkdir $MYPROJECTNAME
    svn add $MYPROJECTNAME
    svn commit -m "Creating $MYPROJECTNAME"

Where ``$MYPROJECTNAME`` is the name of your project.

You'll also want to add ``*.mo`` to the list of ``global-ignores`` in your
``~/.subversion/config`` file.  ``.mo`` files can be compiled at deploy time.

Now in your project root::

    svn co https://svn.mozilla.org/projects/l10n-misc/trunk/$MYPROJECTNAME \
    locale


Setting up the directories
~~~~~~~~~~~~~~~~~~~~~~~~~~

If you don't have any localization you need to do the following:

#. ``./manage.py extract -c``
#. ``./manage.py merge -c``

This will populate your ``locale/`` directory.

You can now commit your ``.po`` files to SVN.  From your project root::

    cd locale/
    svn add *
    svn commit -m 'Locale update'

.. warning::

Be sure to *not* commit the ``.mo`` files.
It would mean the very end of Mozilla as we know it.

.. _Verbatim: http://localize.mozilla.org/


Usage
-----

Once your directories are setup you'll need to tend to your strings and their
localization.

Strings
~~~~~~~

You can localize strings both in python code as well as Jinja templates.

.. highlight:: python

In python::

  from tower import ugettext as _, ugettext_lazy as _lazy

  yodawg = _lazy('The Internet')

  def myview(request):
      return render('template.html', {msg=_('Hello World'), msg2=yodawg})

.. highlight:: jinja

``_lazy`` is used when we are not in scope of a request.  This lets us evaluate
a string, such as ``yodawg``, at the last possible second when we finally can
draw upon the request's context.  E.g. in a template::

    {{ msg2 }}

Will be evaluated to whatever ``The Internet`` is in the requester's locale.


In Jinja we can use the following syntax for localized strings::


    <h1>{{ _('Hello') }}</h1>

    {% trans link='http://mozilla.org' %}
    <p>Go to this <a href="{{ link }}">site</a>.</p>
    {% endtrans %}


Updating our strings
~~~~~~~~~~~~~~~~~~~~

If you make changes to your strings you can update them::

    ./manage.py extract
    ./manage.py merge

Note: you do not need ``-c`` for either command if you've created the required
directories.


If you want to see these changes in your project::

    ./bin/compile-mo.sh locale/


.. highlight:: python


Creating New Locales
~~~~~~~~~~~~~~~~~~~~

In your projects ``settings.py`` add the new locale to ``KNOWN_LANGUAGES``.

Then run ``./manage.py merge -c`` which will create directories for any locales
that are missing in ``/locale``.  You will need to commit the results into SVN.


Make this better
----------------

This process is merely a suggestion.  If you think localization can be improved
or perhaps automated, by all means... **DO IT!**  If your improvement takes off
update this, so others can benefit.

.. _jinja: http://jinja.pocoo.org/docs/templates/#i18n
